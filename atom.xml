<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>最快乐的皮卡丘</title>
  
  <subtitle>gmeme</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://gmeme.github.io/"/>
  <updated>2020-07-08T09:05:06.164Z</updated>
  <id>https://gmeme.github.io/</id>
  
  <author>
    <name>gmeme</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>汇编语言王爽_学习笔记_2</title>
    <link href="https://gmeme.github.io/2020/07/08/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%8E%8B%E7%88%BD_%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_2/"/>
    <id>https://gmeme.github.io/2020/07/08/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%8E%8B%E7%88%BD_%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_2/</id>
    <published>2020-07-08T09:05:26.391Z</published>
    <updated>2020-07-08T09:05:06.164Z</updated>
    
    <content type="html"><![CDATA[<p>@[toc]</p><h1 id="第2章-寄存器"><a href="#第2章-寄存器" class="headerlink" title="第2章 寄存器"></a>第2章 寄存器</h1><p>CPU由运算器、控制器、寄存器等器件构成，靠内部总线相连</p><ul><li>运算器进行信息处理</li><li>寄存器进行信息存储</li><li>控制器控制各器件进行工作</li><li>内部总线连接各个器件，在它们之间进行数据的传送</li></ul><p>8086CPU有14个寄存器：AX、BX、CX、DX、SI、DI、SP、BP、CS、SS、DS、ES、PSW</p><h4 id="2-1-通用寄存器"><a href="#2-1-通用寄存器" class="headerlink" title="2.1 通用寄存器"></a>2.1 通用寄存器</h4><p>8086CPU所有寄存器都是16位的，存放两个字节</p><p><img src="https://img-blog.csdnimg.cn/2020070309044371.png#pic_center" alt="例图"></p><p>AX、BX、CX、DX称为通用寄存器，都可以分为两个独立的8位寄存器使用</p><p>例：通用寄存器AX可分为AH和AL，AX低8位构成AL寄存器，高8位构成AH寄存器</p><p><img src="https://img-blog.csdnimg.cn/20200703090526196.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BocHFxc2o=,size_16,color_FFFFFF,t_70#pic_center" alt="例图"></p><h4 id="2-2-字在寄存器中的存储"><a href="#2-2-字在寄存器中的存储" class="headerlink" title="2.2 字在寄存器中的存储"></a>2.2 字在寄存器中的存储</h4><p>8086CPU存在两种尺寸的数据：</p><ul><li>字节：byte，由8个bit组成</li><li>字：word，一个字由两个字节组成，分别称为高位5字节和低位字节</li></ul><p>为了区分不同进制，十六进制表示的数据后面加H，二进制表示的数据后面加B，十进制的数据后面什么也不加</p><h4 id="2-3-几条汇编指令"><a href="#2-3-几条汇编指令" class="headerlink" title="2.3 几条汇编指令"></a>2.3 几条汇编指令</h4><p>传送指令MOV</p><p>MOV A,B</p><p>(A)&lt;-(B)</p><p>mov ax,18    将18送入寄存器AX</p><p>mov bl,[2000H]    将2000H单元的内容送入BL寄存器</p><p>mov ch,’a’    将a的ASCII码送入CH寄存器</p><p>mov指令可以在CPU内或者CPU和寄存器之间传送字或者字节的数据<br><img src="https://img-blog.csdnimg.cn/20200703090924376.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BocHFxc2o=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>加法指令 ADD</p><p>ADD A,B</p><p>(A)&lt;-(A)+(B)</p><p>除源操作数为立即数的情况，源操作数和目的操作数必须有一个寄存器寻址方式</p><h4 id="2-4-物理地址"><a href="#2-4-物理地址" class="headerlink" title="2.4 物理地址"></a>2.4 物理地址</h4><p>所有的内存单元都有一个唯一的地址，我们将这个唯一的地址称为物理地址</p><h4 id="2-5-16位结构的CPU"><a href="#2-5-16位结构的CPU" class="headerlink" title="2.5 16位结构的CPU"></a>2.5 16位结构的CPU</h4><p>16位结构的CPU：</p><ul><li>寄存器一次最多可以处理16位的数据</li><li>寄存器的最大宽度是16</li><li>寄存器和运算器的通路宽度是16位</li></ul><p>即一次性可以处理、传输、暂存的信息最大长度是16位的</p><h4 id="2-6-8086CPU给出物理地址的方法"><a href="#2-6-8086CPU给出物理地址的方法" class="headerlink" title="2.6 8086CPU给出物理地址的方法"></a>2.6 8086CPU给出物理地址的方法</h4><p>8086CPU有20位地址总线，1MB的寻址能力</p><p>8086CPU是16位结构，一次性处理、传输、暂存的地址是16位</p><p>8086CPU采用在内部两个16位地址合成的方法来形成20位的物理地址</p><p>逻辑结构：</p><p><img src="https://img-blog.csdnimg.cn/20200703091138648.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BocHFxc2o=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ol><li>CPU提供两个16位的地址，一个为段地址，一个为偏移地址</li><li>段地址和偏移地址通过内部总线送入地址加法器部件</li><li>地址加法器采用<strong>物理地址=段地址×16+偏移地址</strong>的方法合成一个20位物理地址</li><li>地址加法器通过内部总线将20位物理地址送人输入输出控制电路</li><li>输入输出控制电路将20位物理地址送到地址总线</li><li>20位物理地址被地址总线传送到存储器</li></ol><h4 id="2-8-段的概念"><a href="#2-8-段的概念" class="headerlink" title="2.8 段的概念"></a>2.8 段的概念</h4><p>内存并没有分段，段的概念来着CPU</p><p>我们可以认为：地址10000H~100FFH的内存单元组成一个段，起始地址位10000H，段地址为1000H，大小为100H</p><p>编程需要可以把连续的内存单元划分成段，用段地址×16定位段的起始地址用偏移地址定位段中的内存单元</p><p>起始地址一定是16倍数，一个段的长度最大为16位（偏移地址位16位）</p><p>数据在21F60H内存单元中可描述为：</p><ul><li>数据在内存2000：1F6O单元中</li><li>数据在内存的2000H段的1F6O单元中</li></ul><h4 id="2-9-段寄存器"><a href="#2-9-段寄存器" class="headerlink" title="2.9 段寄存器"></a>2.9 段寄存器</h4><p>4个段寄存器：CS、DS、SS、ES            </p><p>访问内存时提供内存单元的段地址和偏移地址，送入地址加法器合成物理地址</p><h4 id="2-10-CS和IP"><a href="#2-10-CS和IP" class="headerlink" title="2.10 CS和IP"></a>2.10 CS和IP</h4><p>CS为代码段寄存器，IP为指令指针寄存器</p><p>任意时刻，8086CPU将从内存<strong>CS中内容×16+IP中内容</strong>单元开始，读取指令并执行</p><p>** 如下是8086CPU读取、执行一条指令的过程：**</p><hr><p><img src="https://img-blog.csdnimg.cn/20200703091322958.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BocHFxc2o=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><hr><p><img src="https://img-blog.csdnimg.cn/20200703091415249.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BocHFxc2o=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><hr><p><img src="https://img-blog.csdnimg.cn/20200703091433895.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BocHFxc2o=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><hr><p><img src="https://img-blog.csdnimg.cn/20200703091447979.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BocHFxc2o=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><hr><p><img src="https://img-blog.csdnimg.cn/20200703091503987.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BocHFxc2o=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><hr><p><img src="https://img-blog.csdnimg.cn/20200703091521718.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BocHFxc2o=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><hr><p><img src="https://img-blog.csdnimg.cn/20200703091540389.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BocHFxc2o=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><hr><p><img src="https://img-blog.csdnimg.cn/20200703091554867.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BocHFxc2o=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><hr><p><img src="https://img-blog.csdnimg.cn/20200703091607633.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BocHFxc2o=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><hr><p><strong>8086CPU工作流程简要描述：</strong></p><ul><li>从CS:IP指向的内存单元读取指令，读取的指令进入指令缓冲器</li><li>IP=IP+所读取的长度，从而执行下一条指令</li><li>执行指令，转步骤1，重复过程</li></ul><h4 id="2-11-修改CS、IP的指令"><a href="#2-11-修改CS、IP的指令" class="headerlink" title="2.11 修改CS、IP的指令"></a>2.11 修改CS、IP的指令</h4><p>能够改变CS、IP的指令被统称为转移指令（jmp指令）</p><p>同时修改CS:IP内容：jmp 段地址:偏移地址</p><p>仅修改IP内容：jmp 合法寄存器</p><h4 id="2-12-代码段"><a href="#2-12-代码段" class="headerlink" title="2.12 代码段"></a>2.12 代码段</h4><p>我们将一组内存单元定义为一个段，将长度为N（N&lt;=64KB）的一组代码存放在地址连续、起始地址为16的倍数的内存单元中，即可以认为，这是一个代码段。</p><p>设置CS:IP的值可以执行这段代码</p><h4 id="实验1-查看CPU和内存，用机器指令和汇编指令编程"><a href="#实验1-查看CPU和内存，用机器指令和汇编指令编程" class="headerlink" title="实验1 查看CPU和内存，用机器指令和汇编指令编程"></a>实验1 查看CPU和内存，用机器指令和汇编指令编程</h4><p>Debug是DOS、Windows都提供的实模式（8086方式）程序的调试工具</p><p>但是后来的Windows不再包含debug这个命令，为了实现模拟dos环境的debug，使用DosBox+debug</p><p><img src="https://img-blog.csdnimg.cn/20200703091631373.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BocHFxc2o=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ul><li>安装DosBox后把debug.exe放在一个文件夹下</li><li>运行DosBox输入命令mount c f:\c将文件夹挂载到c盘上，其中f:\c是你的debug所在的文件夹，</li><li>输入命令C:切换到C盘</li><li>然后就可以执行debug的命令了</li></ul><p>如果不想每一次运行都输入这样的命令可以在DosBox下修改如下选中文件，在文件末尾添加你在程序开启后执行的命令<br><img src="https://img-blog.csdnimg.cn/20200703091716665.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BocHFxc2o=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200703091725250.png#pic_center" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;@[toc]&lt;/p&gt;
&lt;h1 id=&quot;第2章-寄存器&quot;&gt;&lt;a href=&quot;#第2章-寄存器&quot; class=&quot;headerlink&quot; title=&quot;第2章 寄存器&quot;&gt;&lt;/a&gt;第2章 寄存器&lt;/h1&gt;&lt;p&gt;CPU由运算器、控制器、寄存器等器件构成，靠内部总线相连&lt;/p&gt;
&lt;ul
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>汇编语言王爽_学习笔记_1</title>
    <link href="https://gmeme.github.io/2020/07/08/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%8E%8B%E7%88%BD_%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_1/"/>
    <id>https://gmeme.github.io/2020/07/08/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%8E%8B%E7%88%BD_%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_1/</id>
    <published>2020-07-08T09:05:24.396Z</published>
    <updated>2020-07-08T09:04:16.486Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第1章-基础知识"><a href="#第1章-基础知识" class="headerlink" title="第1章 基础知识"></a>第1章 基础知识</h1><h4 id="1-1-机器语言"><a href="#1-1-机器语言" class="headerlink" title="1.1 机器语言"></a>1.1 机器语言</h4><p>机器语言：机器指令的集合</p><h4 id="1-2-汇编语言的产生"><a href="#1-2-汇编语言的产生" class="headerlink" title="1.2 汇编语言的产生"></a>1.2 汇编语言的产生</h4><ul><li>汇编语言的主体是汇编指令</li><li>汇编指令是机器指令便于记忆书写的格式</li><li>汇编指令是机器指令的助记符</li></ul><p>寄存器：CPU中可以存储数据的器件，一个CPU可以有多个寄存器<br><img src="https://img-blog.csdnimg.cn/20200702103914159.png#pic_center" alt="在这里插入图片描述"></p><h4 id="1-3-汇编语言的组成"><a href="#1-3-汇编语言的组成" class="headerlink" title="1.3 汇编语言的组成"></a>1.3 汇编语言的组成</h4><ul><li>汇编指令：机器猫的助记符，有对应的机器码。</li><li>伪代码：没有对应的机器码，编译器执行，计算机不执行。</li><li>其他符号：+、-、*、/等，编译器识别，没有对应机器码。</li></ul><h4 id="1-4-存储器"><a href="#1-4-存储器" class="headerlink" title="1.4 存储器"></a>1.4 存储器</h4><ul><li>CPU是计算机的核心部件，控制计算机的运作并进行运算，要想让CPU工作就必需提供数据和指令。</li><li>指令和数据在存储器中存放，也就是平时所说的内存</li><li>磁盘上的数据需要读入到内存才可以被CPU使用</li></ul><h4 id="1-5-指令和数据"><a href="#1-5-指令和数据" class="headerlink" title="1.5 指令和数据"></a>1.5 指令和数据</h4><p>指令和数据都是二进制信息，只是不同的应用赋予了不同的意义</p><h4 id="1-6-存储单元"><a href="#1-6-存储单元" class="headerlink" title="1.6 存储单元"></a>1.6 存储单元</h4><ul><li>存储器被划分成若干存储单元，并从0开始顺序编号</li><li>一个存储单元是一个Byte，即8个二进制位</li><li>磁盘的容量单元同内存一样</li><li>1KB = 1024B    1MB = 1024KB    1GB = 1024MB    1TB = 1024GB</li></ul><h4 id="1-7-CPU对存储器的读写"><a href="#1-7-CPU对存储器的读写" class="headerlink" title="1.7 CPU对存储器的读写"></a>1.7 CPU对存储器的读写</h4><p>CPU要想进行数据的读写，必须和外部器件（标准的说法是芯片）进行下面的3类信息的交互。</p><ul><li>存储单元的地址（地址信息）</li><li>器件的选择，读或写的命令（控制信息）</li><li>读或写的数据（数据信息）</li></ul><p>总线：传送电信号，连接CPU和其他芯片的导线，即一根根导线的集合分为地址总线、控制总线和数据总线。</p><h6 id="CPU从3号单元读取数据的过程如下："><a href="#CPU从3号单元读取数据的过程如下：" class="headerlink" title="CPU从3号单元读取数据的过程如下："></a>CPU从3号单元读取数据的过程如下：</h6><ol><li>CPU通过地址线将地址信息3发出</li><li>CPU通过控制线发出内存读命令，选中存储器芯片，并通知它，将要从中读取数据</li><li>存储器将3号单元的数据8通过数据线送入CPU</li></ol><h4 id="1-8-1-10-总线"><a href="#1-8-1-10-总线" class="headerlink" title="1.8 - 1.10 总线"></a>1.8 - 1.10 总线</h4><p>一个CPU有N根地址线，则地址总线宽度位N，最多寻找2的N次方内存单元</p><p>数据总线的宽度决定CPU和外界的数据传送速度，数据总线宽度为8的8088CPU分两次传送89D8，第一次传送D8，第二次传送89</p><p>控制总线的宽度决定了CPU对外部器件的控制能力，读与写命令分别由“读信号输出的”控制线和“写信号输出的”控制线负责。</p><h4 id="1-11-内存地址空间"><a href="#1-11-内存地址空间" class="headerlink" title="1.11 内存地址空间"></a>1.11 内存地址空间</h4><p>地址总线宽度为10的CPU可以寻址1024个内存单元，这1024给可寻到的内存单元就构成了中国CPU的内存地址空间</p><h4 id="1-12-主板"><a href="#1-12-主板" class="headerlink" title="1.12 主板"></a>1.12 主板</h4><p>计算机主板主要有核心器件（CPU、存储器等）和主要器件，器件通过总线相连</p><h4 id="1-13-接口卡"><a href="#1-13-接口卡" class="headerlink" title="1.13 接口卡"></a>1.13 接口卡</h4><p>计算机系统中，所有可用程序控制其工作的设备，必须受到CPU的控制</p><p>CPU不能直接控制外部设备（显示器、音箱、打印机），直接控制的插在扩展插槽的接口卡</p><h4 id="1-14-各类存储器芯片"><a href="#1-14-各类存储器芯片" class="headerlink" title="1.14 各类存储器芯片"></a>1.14 各类存储器芯片</h4><h6 id="读写属性上分为两类："><a href="#读写属性上分为两类：" class="headerlink" title="读写属性上分为两类："></a>读写属性上分为两类：</h6><ul><li>随机存储器（RAM）：如内存，可读可写，带电存储，关机内容丢失</li><li>只读存储器（ROM）：只能读取不能写入</li></ul><p>装有BIOS的ROM BIOS：Basic Input/Output System，基本输入输出系统</p><p>BIOS由主板和各类接口卡（如显卡、网卡等）厂商提供的软件系统，可以利用该硬件设备进行最基本的输入输出，在主板和某些接口卡上插有存储相应的BIOS的ROM</p><h6 id="从功能和连接上："><a href="#从功能和连接上：" class="headerlink" title="从功能和连接上："></a>从功能和连接上：</h6><ul><li>随机存储器RAM</li><li>装有BIOS的RAM</li><li>接口卡上的RAM</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第1章-基础知识&quot;&gt;&lt;a href=&quot;#第1章-基础知识&quot; class=&quot;headerlink&quot; title=&quot;第1章 基础知识&quot;&gt;&lt;/a&gt;第1章 基础知识&lt;/h1&gt;&lt;h4 id=&quot;1-1-机器语言&quot;&gt;&lt;a href=&quot;#1-1-机器语言&quot; class=&quot;head
      
    
    </summary>
    
    
    
  </entry>
  
</feed>

{"meta":{"title":"最快乐的皮卡丘","subtitle":"gmeme","description":"最快乐的皮卡丘","author":"gmeme","url":"https://gmeme.github.io"},"pages":[{"title":"'about'","date":"2020-07-08T07:21:11.000Z","updated":"2020-07-08T07:21:11.056Z","comments":true,"path":"about/index.html","permalink":"https://gmeme.github.io/about/index.html","excerpt":"","text":""}],"posts":[{"title":"汇编语言王爽_学习笔记_2","slug":"汇编语言王爽_学习笔记_2","date":"2020-07-08T09:05:26.391Z","updated":"2020-07-08T09:05:06.164Z","comments":true,"path":"2020/07/08/汇编语言王爽_学习笔记_2/","link":"","permalink":"https://gmeme.github.io/2020/07/08/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%8E%8B%E7%88%BD_%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_2/","excerpt":"","text":"@[toc] 第2章 寄存器CPU由运算器、控制器、寄存器等器件构成，靠内部总线相连 运算器进行信息处理 寄存器进行信息存储 控制器控制各器件进行工作 内部总线连接各个器件，在它们之间进行数据的传送 8086CPU有14个寄存器：AX、BX、CX、DX、SI、DI、SP、BP、CS、SS、DS、ES、PSW 2.1 通用寄存器8086CPU所有寄存器都是16位的，存放两个字节 AX、BX、CX、DX称为通用寄存器，都可以分为两个独立的8位寄存器使用 例：通用寄存器AX可分为AH和AL，AX低8位构成AL寄存器，高8位构成AH寄存器 2.2 字在寄存器中的存储8086CPU存在两种尺寸的数据： 字节：byte，由8个bit组成 字：word，一个字由两个字节组成，分别称为高位5字节和低位字节 为了区分不同进制，十六进制表示的数据后面加H，二进制表示的数据后面加B，十进制的数据后面什么也不加 2.3 几条汇编指令传送指令MOV MOV A,B (A)&lt;-(B) mov ax,18 将18送入寄存器AX mov bl,[2000H] 将2000H单元的内容送入BL寄存器 mov ch,’a’ 将a的ASCII码送入CH寄存器 mov指令可以在CPU内或者CPU和寄存器之间传送字或者字节的数据 加法指令 ADD ADD A,B (A)&lt;-(A)+(B) 除源操作数为立即数的情况，源操作数和目的操作数必须有一个寄存器寻址方式 2.4 物理地址所有的内存单元都有一个唯一的地址，我们将这个唯一的地址称为物理地址 2.5 16位结构的CPU16位结构的CPU： 寄存器一次最多可以处理16位的数据 寄存器的最大宽度是16 寄存器和运算器的通路宽度是16位 即一次性可以处理、传输、暂存的信息最大长度是16位的 2.6 8086CPU给出物理地址的方法8086CPU有20位地址总线，1MB的寻址能力 8086CPU是16位结构，一次性处理、传输、暂存的地址是16位 8086CPU采用在内部两个16位地址合成的方法来形成20位的物理地址 逻辑结构： CPU提供两个16位的地址，一个为段地址，一个为偏移地址 段地址和偏移地址通过内部总线送入地址加法器部件 地址加法器采用物理地址=段地址×16+偏移地址的方法合成一个20位物理地址 地址加法器通过内部总线将20位物理地址送人输入输出控制电路 输入输出控制电路将20位物理地址送到地址总线 20位物理地址被地址总线传送到存储器 2.8 段的概念内存并没有分段，段的概念来着CPU 我们可以认为：地址10000H~100FFH的内存单元组成一个段，起始地址位10000H，段地址为1000H，大小为100H 编程需要可以把连续的内存单元划分成段，用段地址×16定位段的起始地址用偏移地址定位段中的内存单元 起始地址一定是16倍数，一个段的长度最大为16位（偏移地址位16位） 数据在21F60H内存单元中可描述为： 数据在内存2000：1F6O单元中 数据在内存的2000H段的1F6O单元中 2.9 段寄存器4个段寄存器：CS、DS、SS、ES 访问内存时提供内存单元的段地址和偏移地址，送入地址加法器合成物理地址 2.10 CS和IPCS为代码段寄存器，IP为指令指针寄存器 任意时刻，8086CPU将从内存CS中内容×16+IP中内容单元开始，读取指令并执行 ** 如下是8086CPU读取、执行一条指令的过程：** 8086CPU工作流程简要描述： 从CS:IP指向的内存单元读取指令，读取的指令进入指令缓冲器 IP=IP+所读取的长度，从而执行下一条指令 执行指令，转步骤1，重复过程 2.11 修改CS、IP的指令能够改变CS、IP的指令被统称为转移指令（jmp指令） 同时修改CS:IP内容：jmp 段地址:偏移地址 仅修改IP内容：jmp 合法寄存器 2.12 代码段我们将一组内存单元定义为一个段，将长度为N（N&lt;=64KB）的一组代码存放在地址连续、起始地址为16的倍数的内存单元中，即可以认为，这是一个代码段。 设置CS:IP的值可以执行这段代码 实验1 查看CPU和内存，用机器指令和汇编指令编程Debug是DOS、Windows都提供的实模式（8086方式）程序的调试工具 但是后来的Windows不再包含debug这个命令，为了实现模拟dos环境的debug，使用DosBox+debug 安装DosBox后把debug.exe放在一个文件夹下 运行DosBox输入命令mount c f:\\c将文件夹挂载到c盘上，其中f:\\c是你的debug所在的文件夹， 输入命令C:切换到C盘 然后就可以执行debug的命令了 如果不想每一次运行都输入这样的命令可以在DosBox下修改如下选中文件，在文件末尾添加你在程序开启后执行的命令","categories":[],"tags":[],"keywords":[]},{"title":"汇编语言王爽_学习笔记_1","slug":"汇编语言王爽_学习笔记_1","date":"2020-07-08T09:05:24.396Z","updated":"2020-07-08T09:04:16.486Z","comments":true,"path":"2020/07/08/汇编语言王爽_学习笔记_1/","link":"","permalink":"https://gmeme.github.io/2020/07/08/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%8E%8B%E7%88%BD_%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_1/","excerpt":"","text":"第1章 基础知识1.1 机器语言机器语言：机器指令的集合 1.2 汇编语言的产生 汇编语言的主体是汇编指令 汇编指令是机器指令便于记忆书写的格式 汇编指令是机器指令的助记符 寄存器：CPU中可以存储数据的器件，一个CPU可以有多个寄存器 1.3 汇编语言的组成 汇编指令：机器猫的助记符，有对应的机器码。 伪代码：没有对应的机器码，编译器执行，计算机不执行。 其他符号：+、-、*、/等，编译器识别，没有对应机器码。 1.4 存储器 CPU是计算机的核心部件，控制计算机的运作并进行运算，要想让CPU工作就必需提供数据和指令。 指令和数据在存储器中存放，也就是平时所说的内存 磁盘上的数据需要读入到内存才可以被CPU使用 1.5 指令和数据指令和数据都是二进制信息，只是不同的应用赋予了不同的意义 1.6 存储单元 存储器被划分成若干存储单元，并从0开始顺序编号 一个存储单元是一个Byte，即8个二进制位 磁盘的容量单元同内存一样 1KB = 1024B 1MB = 1024KB 1GB = 1024MB 1TB = 1024GB 1.7 CPU对存储器的读写CPU要想进行数据的读写，必须和外部器件（标准的说法是芯片）进行下面的3类信息的交互。 存储单元的地址（地址信息） 器件的选择，读或写的命令（控制信息） 读或写的数据（数据信息） 总线：传送电信号，连接CPU和其他芯片的导线，即一根根导线的集合分为地址总线、控制总线和数据总线。 CPU从3号单元读取数据的过程如下： CPU通过地址线将地址信息3发出 CPU通过控制线发出内存读命令，选中存储器芯片，并通知它，将要从中读取数据 存储器将3号单元的数据8通过数据线送入CPU 1.8 - 1.10 总线一个CPU有N根地址线，则地址总线宽度位N，最多寻找2的N次方内存单元 数据总线的宽度决定CPU和外界的数据传送速度，数据总线宽度为8的8088CPU分两次传送89D8，第一次传送D8，第二次传送89 控制总线的宽度决定了CPU对外部器件的控制能力，读与写命令分别由“读信号输出的”控制线和“写信号输出的”控制线负责。 1.11 内存地址空间地址总线宽度为10的CPU可以寻址1024个内存单元，这1024给可寻到的内存单元就构成了中国CPU的内存地址空间 1.12 主板计算机主板主要有核心器件（CPU、存储器等）和主要器件，器件通过总线相连 1.13 接口卡计算机系统中，所有可用程序控制其工作的设备，必须受到CPU的控制 CPU不能直接控制外部设备（显示器、音箱、打印机），直接控制的插在扩展插槽的接口卡 1.14 各类存储器芯片读写属性上分为两类： 随机存储器（RAM）：如内存，可读可写，带电存储，关机内容丢失 只读存储器（ROM）：只能读取不能写入 装有BIOS的ROM BIOS：Basic Input/Output System，基本输入输出系统 BIOS由主板和各类接口卡（如显卡、网卡等）厂商提供的软件系统，可以利用该硬件设备进行最基本的输入输出，在主板和某些接口卡上插有存储相应的BIOS的ROM 从功能和连接上： 随机存储器RAM 装有BIOS的RAM 接口卡上的RAM","categories":[],"tags":[],"keywords":[]}]}